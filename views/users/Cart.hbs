<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <style>
        .bodeHead {
            background: #e6e6e6;
            min-height: 100vh;
            display: flex;
            align-items: center;
            font-family: sans-serif;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .card {
            margin: auto;
            max-width: 950px;
            width: 90%;
            box-shadow: 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            border-radius: 1rem;
            border: transparent;
        }

        .cart {
            background-color: #fff;
            padding: 4vh 5vh;
            border-bottom-left-radius: 1rem;
            border-top-left-radius: 1rem;
        }

        .summary {
            background-color: #ddd;
            border-top-right-radius: 1rem;
            border-bottom-right-radius: 1rem;
            padding: 4vh;
            color: rgb(65, 65, 65);
        }

        .title {
            margin-bottom: 5vh;
        }

        .main {
            padding: 2vh 0;
            width: 100%;
        }

        .img-fluid {
            width: 3.5rem;
        }

        .close {
            font-size: 0.7rem;
        }

        .back-to-shop {
            margin-top: 4.5rem;
        }

        .btn {
            background-color: #000;
            border-color: #000;
            color: white;
            width: 100%;
            font-size: 0.7rem;
            margin-top: 4vh;
            padding: 1vh;
            border-radius: 0;
        }

        .btn:hover {
            color: white;
        }

        select,
        input {
            border: 1px solid rgba(0, 0, 0, 0.137);
            padding: 1.5vh 1vh;
            outline: none;
            width: 100%;
            background-color: rgb(247, 247, 247);
            margin-bottom: 4vh;
        }
    </style>
</head>

<body>
    <div class="bodyHead p-5">
        <div class="card">
            <div class="row">
                <div class="col-md-8 cart">
                    <div class="title">
                        <div class="row">
                            <div class="col">
                                <h4><b>Shopping Cart</b></h4>
                            </div>
                            <div class="col text-right text-muted">{{products.length}} items</div>
                        </div>
                    </div>

                    {{#each products}}
                    <div class="row border-top border-bottom">
                        <div class="row main align-items-center">
                            <div class="col-2"><img class="img-fluid" src="{{this.firstImage}}" alt="Product Image">
                            </div>
                            <div class="col">
                                <div class="row text-muted">{{this.category}}</div>
                                <div class="row">{{this.name}}</div>
                            </div>
                            <div class="col">
                                <a class="decrement" data-product-id="{{this._id}}"
                                    data-price="{{this.unitPrice}}">-</a>
                                <span class="border quantity" data-product-id="{{this._id}}">
                                    {{this.newQuantity}}
                                </span>
                                <a class="increment" data-product-id="{{this._id}}"
                                    data-price="{{this.unitPrice}}">+</a>
                            </div>
                            <div class="col">&euro; <span class="item-price">{{this.finalPrice}}</span>
                                <span class="close remove-cart-item" data-product-id="{{this._id}}">&#10005;</span>
                            </div>
                        </div>
                    </div>
                    {{/each}}

                    <div class="back-to-shop"><a href="#">&leftarrow;</a><span class="text-muted">Back to shop</span>
                    </div>
                </div>

                <div class="col-md-4 summary">
                    <h5><b>Summary</b></h5>
                    <hr>
                    <div class="row">
                        <div class="col">ITEMS {{products.length}}</div>
                        <div class="col text-right">&euro; <span class="total-price">{{totalPrice}}</span></div>
                    </div>
                    <form>
                        <p>SHIPPING</p>
                        <select>
                            <option class="text-muted">Standard-Delivery- &euro;5.00</option>
                        </select>
                        <p>GIVE CODE</p>
                        <input id="code" placeholder="Enter your code">
                    </form>
                    <div class="row" style="border-top: 1px solid rgba(0,0,0,.1); padding: 2vh 0;">
                        <div class="col">TOTAL PRICE</div>
                        <div class="col text-right">&euro; <span class="total-price">{{totalPrice}}</span></div>
                    </div>
                    <button type="button" class="btn btn-primary">Checkout</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
</body>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const updateTotalPrice = () => {
            const itemPrices = document.querySelectorAll(".item-price");
            let totalPrice = 0;
            itemPrices.forEach((priceElement) => {
                const itemPrice = parseFloat(priceElement.textContent);
                if (!isNaN(itemPrice)) totalPrice += itemPrice;
            });
            document.querySelector(".total-price").textContent = totalPrice.toFixed(2);
        };

        const updateQuantityOnServer = (productId, quantity, priceElement) => {
            fetch(`/cart/update-quantity/${productId}/${quantity}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
            })
                .then((res) => res.json())
                .then((data) => {
                    if (data.message === "Quantity updated successfully") {
                        priceElement.textContent = data.finalPrice;
                        updateTotalPrice();
                    } else {
                        console.error(data.message);
                    }
                });
        };

        document.querySelectorAll(".main").forEach((item) => {
            const incrementButton = item.querySelector(".increment");
            const decrementButton = item.querySelector(".decrement");
            const quantityElement = item.querySelector(".quantity");
            const priceElement = item.querySelector(".item-price");

            incrementButton.addEventListener("click", () => {
                let quantity = parseInt(quantityElement.textContent);
                quantity++;
                quantityElement.textContent = quantity;
                updateQuantityOnServer(incrementButton.dataset.productId, quantity, priceElement);
            });

            decrementButton.addEventListener("click", () => {
                let quantity = parseInt(quantityElement.textContent);
                if (quantity > 1) {
                    quantity--;
                    quantityElement.textContent = quantity;
                    updateQuantityOnServer(decrementButton.dataset.productId, quantity, priceElement);
                }
            });
        });
    });
    document.addEventListener("DOMContentLoaded", function () {
        const removeButtons = document.querySelectorAll(".remove-cart-item");
        removeButtons.forEach(button => {
            button.addEventListener("click", function () {
                const productId = this.getAttribute("data-product-id");
                fetch(`/cart/remove-cart/${productId}`, {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                    },
                })
                    .then(response => {
                        if (response.ok) {
                            alert("Item removed from cart successfully!");
                            location.reload();
                        } else {
                            alert("Failed to remove item from cart.");
                        }
                    })
                    .catch(error => {
                        console.error("Error removing item from cart:", error);
                    });
            });
        });
    });
    // Checkout functionality
    document.querySelector(".btn").addEventListener("click", function (e) {
        e.preventDefault();

        const offerCode = document.getElementById("code").value;
        const shippingMethod = document.querySelector("select").value;
        const totalPrice = parseFloat(
            document.querySelector(".total-price").textContent.trim()
        );

        if (isNaN(totalPrice)) {
            alert("Invalid total price. Please try again.");
            return;
        }

        const cartItems = [];
        document.querySelectorAll(".quantity").forEach((quantityElement) => {
            const productId = quantityElement.dataset.productId;
            const quantity = parseInt(quantityElement.textContent.trim(), 10);
            if (productId && !isNaN(quantity)) {
                cartItems.push({ productId, quantity });
            }
        });

        const cartData = {
            offerCode,
            shippingMethod,
            totalPrice,
            items: cartItems,
        };

        fetch("/order/checkout", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(cartData),
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.message === "Checkout successful") {
                    alert("Checkout successful! Your order is being processed.");
                    window.location.href = "/";
                } else {
                    alert("Error during checkout: " + data.message);
                }
            })
            .catch((err) => {
                console.error("Error:", err);
                alert("An error occurred while processing your checkout.");
            });
    });
</script>



</html>