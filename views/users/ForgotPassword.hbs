<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password</title>
    <link href="https://fonts.googleapis.com/css2?family=Jost:wght@500&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/login.css">
    <style>
        /* Style for loading message */
        .loading-message {
            text-align: center;
            color: white;
            font-size: 1.2em;
            display: none;
        }
    </style>
</head>

<body>
    <h3 class="form-title pt-5" style="color: azure; text-align: center;">Forgot Password Page</h3>
    <div class="loginhead">
        <div class="mains">
            <!-- Initial Forgot Password Form -->
            <form id="forgotPasswordForm">
                <label for="email">Enter your email:</label>
                <input type="email" name="email" id="email" placeholder="example@example.com" required>
                <p id="errorMessage" class="error-message" style="display: none;"></p>
                <button type="submit" class="logButton">Send OTP</button>
            </form>
            <div id="loadingMessage" class="loading-message"></div>
        </div>
    </div>

    <script>
        document.getElementById("forgotPasswordForm").addEventListener("submit", async function (event) {
            event.preventDefault(); // Prevent default form submission
            const emailInput = document.getElementById("email");
            const errorMessage = document.getElementById("errorMessage");
            const loadingMessage = document.getElementById("loadingMessage");

            // Clear previous errors
            errorMessage.style.display = "none";

            // Start the countdown
            let countdown = 5;
            loadingMessage.style.display = "block";
            loadingMessage.textContent = `Sending OTP, please wait... ${countdown} seconds remaining`;

            const countdownInterval = setInterval(() => {
                countdown -= 1;
                if (countdown > 0) {
                    loadingMessage.textContent = `Sending OTP, please wait... ${countdown} seconds remaining`;
                } else {
                    clearInterval(countdownInterval);
                }
            }, 1000);

            try {
                const response = await fetch("/auth/handle-forgot-password", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ email: emailInput.value }),
                });

                // Simulate a 5-second delay for demonstration
                await new Promise((resolve) => setTimeout(resolve, 5000));

                const result = await response.json();

                if (response.ok) {
                    // Hide loading message
                    loadingMessage.style.display = "none";

                    // If OTP sent successfully, replace the form with OTP input
                    document.querySelector(".mains").innerHTML = `
                        <h3 style="color: azure; text-align: center;">Verify OTP</h3>
                        <form id="verifyOtpForm">
                            <label for="otp">Enter OTP:</label>
                            <input type="text" name="otp" id="otp" placeholder="Enter your OTP" required>
                            <p id="otpErrorMessage" class="error-message" style="display: none;"></p>
                            <button type="submit" class="logButton">Verify OTP</button>
                        </form>
                    `;

                    // Attach new form handler for OTP verification
                    document.getElementById("verifyOtpForm").addEventListener("submit", async function (event) {
                        event.preventDefault();
                        const otpInput = document.getElementById("otp");
                        const otpErrorMessage = document.getElementById("otpErrorMessage");

                        try {
                            const otpResponse = await fetch("/auth/verify-otp", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify({ email: emailInput.value, otp: otpInput.value }),
                            });

                            const otpResult = await otpResponse.json();

                            if (otpResponse.ok) {
                                alert("OTP verified successfully!");
                                // Redirect to password reset page or show success message
                                window.location.href = `/auth/get-create-newuser?email=${emailInput.value}`;
                            } else {
                                otpErrorMessage.textContent = otpResult.error || "Invalid OTP.";
                                otpErrorMessage.style.display = "block";
                            }
                        } catch (error) {
                            otpErrorMessage.textContent = "An error occurred while verifying OTP.";
                            otpErrorMessage.style.display = "block";
                        }
                    });
                } else {
                    clearInterval(countdownInterval);
                    loadingMessage.style.display = "none"; // Hide loading message on error
                    errorMessage.textContent = result.error || "Error sending OTP.";
                    errorMessage.style.display = "block";
                }
            } catch (error) {
                clearInterval(countdownInterval);
                loadingMessage.style.display = "none"; // Hide loading message on error
                errorMessage.textContent = "An error occurred. Please try again.";
                errorMessage.style.display = "block";
            }
        });
    </script>
</body>

</html>